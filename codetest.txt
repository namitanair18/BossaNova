/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

#define MAX_LENGTH 21  //Conidering max value of n=100
#define INTSTRING "00000000000000000000"
 char f2[] ="000000000000000000000"; //to handle values bigger than unsigned long long
calculateFibonaaci(){
    
    
}
 
char* iterativeFibonacci(int n){
    
  char f0[]="000000000000000000000";
  char f1[]="000000000000000000000";

  bool carry = false;
  int pos =MAX_LENGTH-1;
  int f1int; int f0int;
  int f2int;
  if(n==0)
      return f2;

  f1int =(*(f1+pos)-'0') +1;
  f0int = *(f0+pos)-'0';
  *(f1+pos) = f1int+'0';
  if(n==1){
      f2[MAX_LENGTH-1]='1';
      return f2;
  }
  for(int i=2;i<=n;i++){
      pos=MAX_LENGTH-1;
     for(int j=0;j<MAX_LENGTH;j++)
        f2[j]='0';
     while(pos>=0){
         
        f1int = (*(f1+pos)-'0');
        f0int = *(f0+pos)-'0';
      
        f2int = f0int+f1int;
        if(carry){
        f2int =f0int+f1int+1;
        carry=false;}
        if(f2int >9){
        f2int -=10; carry =true;}
        f2[pos] = f2int+'0';
          //    printf("f1 %c",f1[pos]);
          //     printf("f2 %c",f2[pos]);
      pos--;
       
      } 
      for(int i=0;i<MAX_LENGTH;i++)
       f0[i]=f1[i];
     for(int i=0;i<MAX_LENGTH;i++)
       f1[i]=f2[i];

  }
    return f2;
}
char* recursiveFibonacci(int n){
   
  int val =0;
 static char f0[]="000000000000000000000";
 static char f1[]="000000000000000000001";
   if(n==0 )
      return f0;
   if(n==1)
      return f1;

  char* pntrf1 = recursiveFibonacci(n-1);
  char* pntrf0 =recursiveFibonacci(n-2);
  for(int i=0; i<MAX_LENGTH-1;i++){
      f2[i]=*(pntrf0+i)+*(pntrf1+i);
  }
    return f2;
}

int main()
{
    uint8_t n=0;
    char* result;
    do{ 
        printf("Input number N to determine Fibonacci value : \n");//TODO: support condition for char
        scanf("%d",&n);
        if(n >100){
             printf("Max value of N is 100. Retry. \n ");
        }
    }while(n>100);
    
    
    result = iterativeFibonacci(n);
    printf("result of iterativeFibonacci is  \n");
    for(int i=0;i<MAX_LENGTH;i++){
        printf("%c",*(result+i));
    }
     printf("result of recursiveFibonacci is  \n");
   char* result2 = recursiveFibonacci(n);
  for(int i=0;i<MAX_LENGTH;i++){
        printf("%c",*(result+i));
    }
    return 0;
}
